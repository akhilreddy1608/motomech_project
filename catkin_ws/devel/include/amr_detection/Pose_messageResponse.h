// Generated by gencpp from file amr_detection/Pose_messageResponse.msg
// DO NOT EDIT!


#ifndef AMR_DETECTION_MESSAGE_POSE_MESSAGERESPONSE_H
#define AMR_DETECTION_MESSAGE_POSE_MESSAGERESPONSE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <geometry_msgs/Pose.h>
#include <geometry_msgs/Pose.h>

namespace amr_detection
{
template <class ContainerAllocator>
struct Pose_messageResponse_
{
  typedef Pose_messageResponse_<ContainerAllocator> Type;

  Pose_messageResponse_()
    : pose()
    , pose_shifted()
    , output()
    , success(false)  {
    }
  Pose_messageResponse_(const ContainerAllocator& _alloc)
    : pose(_alloc)
    , pose_shifted(_alloc)
    , output(_alloc)
    , success(false)  {
  (void)_alloc;
    }



   typedef  ::geometry_msgs::Pose_<ContainerAllocator>  _pose_type;
  _pose_type pose;

   typedef  ::geometry_msgs::Pose_<ContainerAllocator>  _pose_shifted_type;
  _pose_shifted_type pose_shifted;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _output_type;
  _output_type output;

   typedef uint8_t _success_type;
  _success_type success;





  typedef boost::shared_ptr< ::amr_detection::Pose_messageResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::amr_detection::Pose_messageResponse_<ContainerAllocator> const> ConstPtr;

}; // struct Pose_messageResponse_

typedef ::amr_detection::Pose_messageResponse_<std::allocator<void> > Pose_messageResponse;

typedef boost::shared_ptr< ::amr_detection::Pose_messageResponse > Pose_messageResponsePtr;
typedef boost::shared_ptr< ::amr_detection::Pose_messageResponse const> Pose_messageResponseConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::amr_detection::Pose_messageResponse_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::amr_detection::Pose_messageResponse_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::amr_detection::Pose_messageResponse_<ContainerAllocator1> & lhs, const ::amr_detection::Pose_messageResponse_<ContainerAllocator2> & rhs)
{
  return lhs.pose == rhs.pose &&
    lhs.pose_shifted == rhs.pose_shifted &&
    lhs.output == rhs.output &&
    lhs.success == rhs.success;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::amr_detection::Pose_messageResponse_<ContainerAllocator1> & lhs, const ::amr_detection::Pose_messageResponse_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace amr_detection

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::amr_detection::Pose_messageResponse_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::amr_detection::Pose_messageResponse_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::amr_detection::Pose_messageResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::amr_detection::Pose_messageResponse_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::amr_detection::Pose_messageResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::amr_detection::Pose_messageResponse_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::amr_detection::Pose_messageResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "d3de3f2f8c8330f3ac521e84ce31d228";
  }

  static const char* value(const ::amr_detection::Pose_messageResponse_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xd3de3f2f8c8330f3ULL;
  static const uint64_t static_value2 = 0xac521e84ce31d228ULL;
};

template<class ContainerAllocator>
struct DataType< ::amr_detection::Pose_messageResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "amr_detection/Pose_messageResponse";
  }

  static const char* value(const ::amr_detection::Pose_messageResponse_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::amr_detection::Pose_messageResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "geometry_msgs/Pose pose           # pose between the odom link and europallet center frame\n"
"geometry_msgs/Pose pose_shifted   # pose between the odom link and europallet center shifted frame\n"
"string output                     # informations\n"
"bool success                      # it indicates success\n"
"\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Pose\n"
"# A representation of pose in free space, composed of position and orientation. \n"
"Point position\n"
"Quaternion orientation\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Point\n"
"# This contains the position of a point in free space\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Quaternion\n"
"# This represents an orientation in free space in quaternion form.\n"
"\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"float64 w\n"
;
  }

  static const char* value(const ::amr_detection::Pose_messageResponse_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::amr_detection::Pose_messageResponse_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.pose);
      stream.next(m.pose_shifted);
      stream.next(m.output);
      stream.next(m.success);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Pose_messageResponse_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::amr_detection::Pose_messageResponse_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::amr_detection::Pose_messageResponse_<ContainerAllocator>& v)
  {
    s << indent << "pose: ";
    s << std::endl;
    Printer< ::geometry_msgs::Pose_<ContainerAllocator> >::stream(s, indent + "  ", v.pose);
    s << indent << "pose_shifted: ";
    s << std::endl;
    Printer< ::geometry_msgs::Pose_<ContainerAllocator> >::stream(s, indent + "  ", v.pose_shifted);
    s << indent << "output: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.output);
    s << indent << "success: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.success);
  }
};

} // namespace message_operations
} // namespace ros

#endif // AMR_DETECTION_MESSAGE_POSE_MESSAGERESPONSE_H
